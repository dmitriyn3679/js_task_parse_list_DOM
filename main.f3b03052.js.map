{"version":3,"sources":["scripts/main.js"],"names":["employees","document","querySelectorAll","ul","querySelector","convertSalary","salary","replace","sortList","list","sort","p1","p2","dataset","innerHTML","map","person","position","age","textContent","join","getEmployees","name","trim"],"mappings":";AAAA,aAqCA,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wIAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,OAAA,YAAA,OAAA,GAAA,OAAA,MAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAnCA,IAAMA,EAAgBC,EAAAA,SAASC,iBAAiB,OAC1CC,EAAKF,SAASG,cAAc,MAE5BC,EAAgB,SAAAC,GACb,OAACA,EAAOC,QAAQ,UAAW,KAG9BC,EAAW,SAAAC,GACRA,OAAAA,EAAKC,KACV,SAACC,EAAIC,GACHP,OAAAA,EAAcO,EAAGC,QAAQP,QAAUD,EAAcM,EAAGE,QAAQP,WAIlEH,EAAGW,UAAYN,EAASR,GAAWe,IAAI,SAAAC,GAElBA,MAAAA,2BAAAA,OAAAA,EAAOH,QAAQI,SACjBD,wBAAAA,OAAAA,EAAOH,QAAQP,OAClBU,qBAAAA,OAAAA,EAAOH,QAAQK,IAExBF,iBAAAA,OAAAA,EAAOG,YAN+B,gBAQ1CC,KAAK,IAER,IAAMC,EAAe,SAAAZ,GACZT,OAAAA,EAAUe,IAAI,SAAAC,GACnB,MAAA,CACEM,KAAMN,EAAOG,YAAYI,OACzBN,SAAUD,EAAOH,QAAQI,SACzBX,OAAQU,EAAOH,QAAQP,OACvBY,IAAKF,EAAOH,QAAQK,QAK1BG,EAAarB","file":"main.f3b03052.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst employees = [...document.querySelectorAll('li')];\nconst ul = document.querySelector('ul');\n\nconst convertSalary = salary => {\n  return +salary.replace(/[^+\\d]/g, '');\n};\n\nconst sortList = list => {\n  return list.sort(\n    (p1, p2) =>\n      convertSalary(p2.dataset.salary) - convertSalary(p1.dataset.salary)\n  );\n};\n\nul.innerHTML = sortList(employees).map(person =>\n  `<li\n     data-position=${person.dataset.position} \n     data-salary=${person.dataset.salary} \n     data-age=${person.dataset.age}\n   >\n     ${person.textContent}\n   </li>`)\n  .join('');\n\nconst getEmployees = list => {\n  return employees.map(person => (\n    {\n      name: person.textContent.trim(),\n      position: person.dataset.position,\n      salary: person.dataset.salary,\n      age: person.dataset.age,\n    }\n  ));\n};\n\ngetEmployees(employees);\n"]}